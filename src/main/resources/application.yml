
server:
  port: 8081
spring:
  profiles:
    active: elapse_route


#配置文件为add_request_header_route，在add_request_header_route配置中，
#配置了roter的id为add_request_header_route，路由地址为http://httpbin.org:80/get，
#该router有AfterPredictFactory，有一个filter为AddRequestHeaderGatewayFilterFactory(约定写成AddRequestHeader)，
#AddRequestHeader过滤器工厂会在请求头加上一对请求头，名称为X-Request-Foo，值为Bar。
#curl localhost:8081
---
spring:
  cloud:
    gateway:
      routes:
      - id: add_request_header_route
        uri: http://httpbin.org:80/get
        filters:
        - AddRequestHeader=X-Request-Foo, Bar
        predicates:
        - After=2019-01-20T17:42:47.789-07:00[America/Denver]
  profiles: add_request_header_route


#所有的/foo/**开始的路径都会命中配置的router，并执行过滤器的逻辑，在本案例中配置了RewritePath过滤器工厂，
#此工厂将/foo/(?.*)重写为{segment}，然后转发到https://blog.csdn.net。
#比如在网页上请求localhost:8081/foo/forezp，此时会将请求转发到https://blog.csdn.net/forezp的页面，
#比如在网页上请求localhost:8081/foo/forezp/1，页面显示404，就是因为不存在https://blog.csdn.net/forezp/1这个页面。
---
spring:
  cloud:
    gateway:
      routes:
      - id: rewritepath_route
        uri: https://blog.csdn.net
        predicates:
        - Path=/foo/**
        filters:
        - RewritePath=/foo/(?<segment>.*), /$\{segment}
  profiles: rewritepath_route



#自定义过滤器工厂类
#RequestTime 找到 RequestTimeGatewayFilterFactory
#访问localhost:8081?name=forezp

#true /:1625ms params{name=[forezp]}
#false /:13011ms
---
spring:
  cloud:
    gateway:
      routes:
      - id: elapse_route
        uri: http://httpbin.org:80/get
        filters:
#        - RequestTime=true
        - RequestTime=false
        predicates:
        - After=2017-01-20T17:42:47.789-07:00[America/Denver]
  profiles: elapse_route














